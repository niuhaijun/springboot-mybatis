<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.niu.springbootmybatis.mapper.OrderMapper" >
  <resultMap id="BaseResultMap" type="com.niu.springbootmybatis.model.Order" >
    <constructor >
      <idArg column="user_id" jdbcType="VARCHAR" javaType="java.lang.String" />
      <idArg column="good_id" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="used" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    user_id, good_id, create_time, update_time, used
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.niu.springbootmybatis.model.OrderExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from spring_boot_mybatis_order
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="com.niu.springbootmybatis.model.OrderKey" >
    select
    <include refid="Base_Column_List" />
    from spring_boot_mybatis_order
    where user_id = #{userId,jdbcType=VARCHAR}
      and good_id = #{goodId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.niu.springbootmybatis.model.OrderKey" >
    delete from spring_boot_mybatis_order
    where user_id = #{userId,jdbcType=VARCHAR}
      and good_id = #{goodId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.niu.springbootmybatis.model.OrderExample" >
    delete from spring_boot_mybatis_order
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.niu.springbootmybatis.model.Order" >
    insert into spring_boot_mybatis_order (user_id, good_id, create_time,
      update_time, used)
    values (#{userId,jdbcType=VARCHAR}, #{goodId,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP},
      #{updateTime,jdbcType=TIMESTAMP}, #{used,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.niu.springbootmybatis.model.Order" >
    insert into spring_boot_mybatis_order
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="goodId != null" >
        good_id,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="used != null" >
        used,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="goodId != null" >
        #{goodId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="used != null" >
        #{used,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.niu.springbootmybatis.model.OrderExample" resultType="java.lang.Integer" >
    select count(*) from spring_boot_mybatis_order
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update spring_boot_mybatis_order
    <set >
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=VARCHAR},
      </if>
      <if test="record.goodId != null" >
        good_id = #{record.goodId,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.used != null" >
        used = #{record.used,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update spring_boot_mybatis_order
    set user_id = #{record.userId,jdbcType=VARCHAR},
      good_id = #{record.goodId,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      used = #{record.used,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.niu.springbootmybatis.model.Order" >
    update spring_boot_mybatis_order
    <set >
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="used != null" >
        used = #{used,jdbcType=INTEGER},
      </if>
    </set>
    where user_id = #{userId,jdbcType=VARCHAR}
      and good_id = #{goodId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.niu.springbootmybatis.model.Order" >
    update spring_boot_mybatis_order
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      used = #{used,jdbcType=INTEGER}
    where user_id = #{userId,jdbcType=VARCHAR}
      and good_id = #{goodId,jdbcType=VARCHAR}
  </update>


  <!--
  联表查询
  -->
  <resultMap id="userWithGood" type="com.niu.springbootmybatis.controller.vo.UserGoodVO">
    <id column="uid" property="id"/>
    <result column="username" property="username"/>
    <result column="used" property="used"/>
    <!--
    association标签指定单个对象的对应关系
      property : 指定将数据放入UserGoodVO中的GoodVO属性中
      javaType : user属性的类型
    -->
    <association property="goodVOList" javaType="com.niu.springbootmybatis.controller.vo.GoodVO">
      <id column="gid" property="id"/>
      <result column="type" property="type"/>
      <result column="name" property="name"/>
      <result column="price" property="price"/>
      <result column="num" property="num"/>
      <result column="create_time" property="createTime"/>
      <result column="update_time" property="updateTime"/>
      <result column="used" property="used"/>
    </association>
  </resultMap>
  <select id="getUserWithGoods" parameterType="java.lang.String" resultMap="userWithGood">
    SELECT
      `user`.id as uid,
      `user`.username,

      good.id as gid,
      good.type,
      good.name,
      good.price,
      good.num,
      good.create_time,
      good.update_time,
      good.used
    FROM
      spring_boot_mybatis_user `user`
        JOIN spring_boot_mybatis_order `order` ON `user`.id = `order`.user_id
        JOIN spring_boot_mybatis_good `good` ON `order`.good_id = `good`.id
    WHERE `user`.id = #{userId}
  </select>


</mapper>